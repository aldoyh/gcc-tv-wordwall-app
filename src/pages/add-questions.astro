---
import Layout from '../components/Layout.astro';
import { t } from '../utils/i18n';

const gameId = Astro.url.searchParams.get('game_id');
---

<Layout title={t('add_questions')}>
  <div class="container mx-auto p-4">
    <h1 class="text-3xl font-bold mb-6 text-foreground">{t('add_questions')}</h1>
    <form id="add-question-form" class="max-w-lg mx-auto bg-card text-card-foreground p-8 rounded-lg shadow-md border border-border">
      <input type="hidden" name="game_id" value={gameId}>
      <div class="mb-4">
        <label for="text" class="block text-sm font-medium mb-2">{t('question')}:</label>
        <input type="text" id="text" name="text" required class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50">
      </div>
      <div class="mb-4">
        <label for="options" class="block text-sm font-medium mb-2">{t('options')} ({t('comma_separated')}):</label>
        <input type="text" id="options" name="options" required class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50">
      </div>
      <div class="mb-6">
        <label for="correct_option" class="block text-sm font-medium mb-2">{t('correct_option')} ({t('index')}):</label>
        <input type="number" id="correct_option" name="correct_option" required class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50">
      </div>
      <div class="flex items-center justify-between">
        <button type="submit" id="add-question-btn" class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-primary/90 h-10 px-4 py-2">
          {t('add_question')}
        </button>
        <a href={`/game?id=${gameId}`} class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2">
          {t('back_to_game')}
        </a>
      </div>
    </form>
  </div>
</Layout>

<script>
  import { showNotification } from '../utils/notifications';
  import { t } from '../utils/i18n';

  const form = document.getElementById('add-question-form') as HTMLFormElement;
  const addQuestionBtn = document.getElementById('add-question-btn') as HTMLButtonElement;

  if (form) {
    form.addEventListener('submit', async (e: Event) => {
      e.preventDefault();
      addQuestionBtn.disabled = true; // Disable button on submit
      addQuestionBtn.textContent = t('adding');

      const formData = new FormData(form);
      const data: { [key: string]: FormDataEntryValue | string[] } = Object.fromEntries(formData.entries());
      data.options = (data.options as string).split(',').map((option: string) => option.trim());

      try {
        const response = await fetch('/php-backend/api.php?action=add_question', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        });

        if (response.ok) {
          form.reset();
          showNotification({ message: t('question_added_successfully'), type: 'success' });
        } else {
          const errorText = await response.text();
          showNotification({ message: `${t('error_adding_question')}: ${errorText}`, type: 'error' });
        }
      } catch (error) {
        console.error('Network error:', error);
        showNotification({ message: t('network_error_add_question'), type: 'error' });
      } finally {
        addQuestionBtn.disabled = false;
        addQuestionBtn.textContent = t('add_question');
      }
    });
  }
</script>
